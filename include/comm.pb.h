/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.3 at Fri May  3 19:41:01 2019. */

#ifndef PB_COMM_PB_H_INCLUDED
#define PB_COMM_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _PowerState {
    PowerState_OFF = 0,
    PowerState_ON = 1,
    PowerState_ERROR = 3
} PowerState;
#define _PowerState_MIN PowerState_OFF
#define _PowerState_MAX PowerState_ERROR
#define _PowerState_ARRAYSIZE ((PowerState)(PowerState_ERROR+1))

typedef enum _PowerEvent_EventType {
    PowerEvent_EventType_NORMAL = 0,
    PowerEvent_EventType_CURRENT_LIMITED = 1,
    PowerEvent_EventType_VOLTAGE_LIMITED = 2,
    PowerEvent_EventType_POWER_LIMITED = 3,
    PowerEvent_EventType_TIME_LIMITED = 4
} PowerEvent_EventType;
#define _PowerEvent_EventType_MIN PowerEvent_EventType_NORMAL
#define _PowerEvent_EventType_MAX PowerEvent_EventType_TIME_LIMITED
#define _PowerEvent_EventType_ARRAYSIZE ((PowerEvent_EventType)(PowerEvent_EventType_TIME_LIMITED+1))

/* Struct definitions */
typedef struct _PowerConfiguration {
    pb_callback_t railConfiguration;
/* @@protoc_insertion_point(struct:PowerConfiguration) */
} PowerConfiguration;

typedef struct _PowerControl {
    bool has_powerRail;
    int32_t powerRail;
    bool has_powerState;
    PowerState powerState;
/* @@protoc_insertion_point(struct:PowerControl) */
} PowerControl;

typedef struct _PowerEvent {
    bool has_powerRail;
    int32_t powerRail;
    bool has_eventType;
    PowerEvent_EventType eventType;
/* @@protoc_insertion_point(struct:PowerEvent) */
} PowerEvent;

typedef struct _PowerRailInfo {
    bool has_powerRail;
    int32_t powerRail;
    bool has_voltage;
    float voltage;
    bool has_current;
    float current;
    bool has_powerState;
    PowerState powerState;
/* @@protoc_insertion_point(struct:PowerRailInfo) */
} PowerRailInfo;

typedef struct _RailConfiguration {
    int32_t powerRail;
    bool has_currentLimit;
    float currentLimit;
    bool has_voltageCutoff;
    float voltageCutoff;
    bool has_currentLimitEnabled;
    bool currentLimitEnabled;
    bool has_voltageLimitEnabled;
    bool voltageLimitEnabled;
    bool has_timeLimit;
    int64_t timeLimit;
    bool has_timeLimitEnabled;
    bool timeLimitEnabled;
    bool has_dutyCycle;
    float dutyCycle;
/* @@protoc_insertion_point(struct:RailConfiguration) */
} RailConfiguration;

typedef struct _RxMicro {
    bool has_powerConfiguration;
    PowerConfiguration powerConfiguration;
    bool has_powerControl;
    PowerControl powerControl;
/* @@protoc_insertion_point(struct:RxMicro) */
} RxMicro;

typedef struct _TxMicro {
    bool has_timeStamp;
    int64_t timeStamp;
    pb_size_t powerRailInfo_count;
    PowerRailInfo powerRailInfo[10];
    bool has_powerEvent;
    PowerEvent powerEvent;
/* @@protoc_insertion_point(struct:TxMicro) */
} TxMicro;

/* Default values for struct fields */

/* Initializer values for message structs */
#define RailConfiguration_init_default           {0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define PowerConfiguration_init_default          {{{NULL}, NULL}}
#define PowerControl_init_default                {false, 0, false, _PowerState_MIN}
#define PowerRailInfo_init_default               {false, 0, false, 0, false, 0, false, _PowerState_MIN}
#define PowerEvent_init_default                  {false, 0, false, _PowerEvent_EventType_MIN}
#define TxMicro_init_default                     {false, 0, 0, {PowerRailInfo_init_default, PowerRailInfo_init_default, PowerRailInfo_init_default, PowerRailInfo_init_default, PowerRailInfo_init_default, PowerRailInfo_init_default, PowerRailInfo_init_default, PowerRailInfo_init_default, PowerRailInfo_init_default, PowerRailInfo_init_default}, false, PowerEvent_init_default}
#define RxMicro_init_default                     {false, PowerConfiguration_init_default, false, PowerControl_init_default}
#define RailConfiguration_init_zero              {0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define PowerConfiguration_init_zero             {{{NULL}, NULL}}
#define PowerControl_init_zero                   {false, 0, false, _PowerState_MIN}
#define PowerRailInfo_init_zero                  {false, 0, false, 0, false, 0, false, _PowerState_MIN}
#define PowerEvent_init_zero                     {false, 0, false, _PowerEvent_EventType_MIN}
#define TxMicro_init_zero                        {false, 0, 0, {PowerRailInfo_init_zero, PowerRailInfo_init_zero, PowerRailInfo_init_zero, PowerRailInfo_init_zero, PowerRailInfo_init_zero, PowerRailInfo_init_zero, PowerRailInfo_init_zero, PowerRailInfo_init_zero, PowerRailInfo_init_zero, PowerRailInfo_init_zero}, false, PowerEvent_init_zero}
#define RxMicro_init_zero                        {false, PowerConfiguration_init_zero, false, PowerControl_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define PowerConfiguration_railConfiguration_tag 1
#define PowerControl_powerRail_tag               1
#define PowerControl_powerState_tag              2
#define PowerEvent_powerRail_tag                 1
#define PowerEvent_eventType_tag                 2
#define PowerRailInfo_powerRail_tag              1
#define PowerRailInfo_voltage_tag                2
#define PowerRailInfo_current_tag                3
#define PowerRailInfo_powerState_tag             4
#define RailConfiguration_powerRail_tag          1
#define RailConfiguration_currentLimit_tag       2
#define RailConfiguration_voltageCutoff_tag      3
#define RailConfiguration_currentLimitEnabled_tag 4
#define RailConfiguration_voltageLimitEnabled_tag 5
#define RailConfiguration_timeLimit_tag          6
#define RailConfiguration_timeLimitEnabled_tag   7
#define RailConfiguration_dutyCycle_tag          8
#define RxMicro_powerConfiguration_tag           1
#define RxMicro_powerControl_tag                 2
#define TxMicro_timeStamp_tag                    1
#define TxMicro_powerRailInfo_tag                2
#define TxMicro_powerEvent_tag                   3

/* Struct field encoding specification for nanopb */
extern const pb_field_t RailConfiguration_fields[9];
extern const pb_field_t PowerConfiguration_fields[2];
extern const pb_field_t PowerControl_fields[3];
extern const pb_field_t PowerRailInfo_fields[5];
extern const pb_field_t PowerEvent_fields[3];
extern const pb_field_t TxMicro_fields[4];
extern const pb_field_t RxMicro_fields[3];

/* Maximum encoded size of messages (where known) */
#define RailConfiguration_size                   43
/* PowerConfiguration_size depends on runtime parameters */
#define PowerControl_size                        13
#define PowerRailInfo_size                       23
#define PowerEvent_size                          13
#define TxMicro_size                             276
/* RxMicro_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define COMM_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
